import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  RiSendPlaneFill,
  RiAttachment2,
  RiEmotionLine,
  RiRobot2Line,
  RiUser3Line,
  RiLightbulbLine,
  RiTimeLine,
  RiCheckLine,
  RiMicLine,
  RiImageLine,
  RiFileGifLine,
  RiMoreLine
} from 'react-icons/ri';
import { format, formatDistanceToNow } from 'date-fns';
import { Conversation, Message } from '@/types';

interface ChatWindowProps {
  conversation: Conversation;
}

const ChatWindow: React.FC<ChatWindowProps> = ({ conversation }) => {
  const [newMessage, setNewMessage] = useState('');
  const [messages, setMessages] = useState<Message[]>(conversation.messages);
  const [isTyping, setIsTyping] = useState(false);
  const [suggestedReplies, setSuggestedReplies] = useState<string[]>([]);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [isAttachmentMenuOpen, setIsAttachmentMenuOpen] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Generate AI suggested replies based on conversation context
  const generateSuggestedReplies = () => {
    // In a real app, these would be generated by an AI model based on conversation context
    const lastUserMessage = messages.filter(m => m.isUser).pop();

    if (!lastUserMessage) return [];

    const userMessageLower = lastUserMessage.content.toLowerCase();

    if (userMessageLower.includes('help') || userMessageLower.includes('issue') || userMessageLower.includes('problem')) {
      return [
        "I'd be happy to help you with that issue.",
        "Could you provide more details about the problem?",
        "Let me look into this for you right away."
      ];
    } else if (userMessageLower.includes('thank') || userMessageLower.includes('appreciate')) {
      return [
        "You're welcome! Let me know if you need anything else.",
        "Happy to help! Is there anything else you'd like to know?",
        "Anytime! Don't hesitate to reach out if you have more questions."
      ];
    } else if (userMessageLower.includes('price') || userMessageLower.includes('cost') || userMessageLower.includes('subscription')) {
      return [
        "Our pricing plans start at $9.99/month for the basic tier.",
        "I'd be happy to explain our different pricing options.",
        "We offer several subscription plans to fit different needs."
      ];
    } else {
      return [
        "Thanks for reaching out! How can I assist you today?",
        "I understand. Let me help you with that.",
        "Is there anything specific you'd like to know about our services?"
      ];
    }
  };

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Generate suggested replies when messages change
  useEffect(() => {
    setSuggestedReplies(generateSuggestedReplies());
  }, [messages]);

  const handleSendMessage = (e?: React.FormEvent, suggestedReply?: string) => {
    e?.preventDefault();

    const messageToSend = suggestedReply || newMessage;
    if (messageToSend.trim() === '') return;

    const message: Message = {
      id: `new-${Date.now()}`,
      userId: conversation.userId,
      content: messageToSend,
      timestamp: new Date().toISOString(),
      isUser: false,
    };

    setMessages([...messages, message]);
    setNewMessage('');

    // Simulate user typing response after a delay
    setTimeout(() => {
      setIsTyping(true);

      // Simulate response after typing
      setTimeout(() => {
        setIsTyping(false);

        // Generate a response based on the message
        let responseContent = '';
        const lowerMessage = messageToSend.toLowerCase();

        if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
          responseContent = "Hello! How can I help you today?";
        } else if (lowerMessage.includes('thank')) {
          responseContent = "You're welcome! Is there anything else I can help with?";
        } else if (lowerMessage.includes('help') || lowerMessage.includes('support')) {
          responseContent = "I'd be happy to help. Could you please provide more details about what you need assistance with?";
        } else {
          responseContent = "Thanks for your message. I'll look into this and get back to you as soon as possible.";
        }

        const response: Message = {
          id: `response-${Date.now()}`,
          userId: conversation.userId,
          content: responseContent,
          timestamp: new Date().toISOString(),
          isUser: true,
        };

        setMessages(prev => [...prev, response]);
      }, 1500);
    }, 1000);
  };

  const handleSuggestedReplyClick = (reply: string) => {
    handleSendMessage(undefined, reply);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatMessageTime = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = Math.abs(now.getTime() - date.getTime()) / 36e5;

    if (diffInHours < 24) {
      return format(date, 'h:mm a');
    } else {
      return format(date, 'MMM d, h:mm a');
    }
  };

  // Group messages by date
  const groupedMessages = messages.reduce((groups, message) => {
    const date = new Date(message.timestamp);
    const dateStr = format(date, 'yyyy-MM-dd');

    if (!groups[dateStr]) {
      groups[dateStr] = [];
    }

    groups[dateStr].push(message);
    return groups;
  }, {} as Record<string, Message[]>);

  // Format date for display
  const formatDateHeading = (dateStr: string) => {
    const date = new Date(dateStr);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    if (format(date, 'yyyy-MM-dd') === format(today, 'yyyy-MM-dd')) {
      return 'Today';
    } else if (format(date, 'yyyy-MM-dd') === format(yesterday, 'yyyy-MM-dd')) {
      return 'Yesterday';
    } else {
      return format(date, 'MMMM d, yyyy');
    }
  };

  return (
    <div className="flex flex-col h-full">
      {/* Chat Messages */}
      <div className="flex-1 p-4 overflow-y-auto bg-gray-50 dark:bg-dark-900/20">
        <AnimatePresence initial={false}>
          {Object.entries(groupedMessages).map(([dateStr, dateMessages]) => (
            <div key={dateStr}>
              {/* Date separator */}
              <div className="flex items-center justify-center my-4">
                <div className="bg-gray-200 dark:bg-dark-600 h-px flex-grow"></div>
                <span className="px-2 text-xs font-medium text-gray-500 dark:text-gray-400">
                  {formatDateHeading(dateStr)}
                </span>
                <div className="bg-gray-200 dark:bg-dark-600 h-px flex-grow"></div>
              </div>

              {/* Messages for this date */}
              {dateMessages.map((message, index) => {
                const isFirstInGroup = index === 0 || dateMessages[index - 1].isUser !== message.isUser;
                const isLastInGroup = index === dateMessages.length - 1 || dateMessages[index + 1].isUser !== message.isUser;

                return (
                  <motion.div
                    key={message.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.3 }}
                    className={`flex mb-2 ${message.isUser ? 'justify-start' : 'justify-end'}`}
                  >
                    {message.isUser && isFirstInGroup && (
                      <div className="flex-shrink-0 mr-2 mt-2">
                        <div className="h-8 w-8 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center">
                          <RiUser3Line className="text-blue-500 dark:text-blue-400" />
                        </div>
                      </div>
                    )}

                    <div className={`max-w-xs md:max-w-md ${!message.isUser && isFirstInGroup ? 'mt-2' : ''}`}>
                      {message.isUser && isFirstInGroup && (
                        <div className="ml-2 mb-1">
                          <span className="text-xs font-medium text-gray-700 dark:text-gray-300">
                            {conversation.userId}
                          </span>
                        </div>
                      )}

                      <div
                        className={`rounded-lg px-4 py-2 ${
                          message.isUser
                            ? `bg-white dark:bg-dark-700 text-gray-800 dark:text-gray-200 shadow-sm ${
                                isFirstInGroup && isLastInGroup ? 'rounded-tl-lg rounded-tr-lg rounded-br-lg rounded-bl-lg' :
                                isFirstInGroup ? 'rounded-tl-lg rounded-tr-lg rounded-br-lg rounded-bl-sm' :
                                isLastInGroup ? 'rounded-tl-sm rounded-tr-lg rounded-br-lg rounded-bl-lg' :
                                'rounded-tl-sm rounded-tr-lg rounded-br-lg rounded-bl-sm'
                              }`
                            : `bg-primary-500 dark:bg-primary-600 text-white ${
                                isFirstInGroup && isLastInGroup ? 'rounded-tl-lg rounded-tr-lg rounded-br-lg rounded-bl-lg' :
                                isFirstInGroup ? 'rounded-tl-lg rounded-tr-sm rounded-br-lg rounded-bl-lg' :
                                isLastInGroup ? 'rounded-tl-lg rounded-tr-lg rounded-br-sm rounded-bl-lg' :
                                'rounded-tl-lg rounded-tr-sm rounded-br-sm rounded-bl-lg'
                              }`
                        }`}
                      >
                        <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                        <div className="flex items-center justify-end mt-1">
                          <p className="text-xs opacity-70 flex items-center">
                            {formatMessageTime(message.timestamp)}
                            {!message.isUser && index === messages.length - 1 && (
                              <RiCheckLine className="ml-1 text-xs" />
                            )}
                          </p>
                        </div>
                      </div>
                    </div>

                    {!message.isUser && isFirstInGroup && (
                      <div className="flex-shrink-0 ml-2 mt-2">
                        <div className="h-8 w-8 rounded-full bg-primary-100 dark:bg-primary-900/30 flex items-center justify-center">
                          <RiRobot2Line className="text-primary-500 dark:text-primary-400" />
                        </div>
                      </div>
                    )}
                  </motion.div>
                );
              })}
            </div>
          ))}

          {/* Typing indicator */}
          {isTyping && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex justify-start mb-4"
            >
              <div className="flex-shrink-0 mr-2">
                <div className="h-8 w-8 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center">
                  <RiUser3Line className="text-blue-500 dark:text-blue-400" />
                </div>
              </div>
              <div className="bg-white dark:bg-dark-700 rounded-lg px-4 py-2 shadow-sm">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 rounded-full bg-gray-400 dark:bg-gray-500 animate-bounce" style={{ animationDelay: '0ms' }}></div>
                  <div className="w-2 h-2 rounded-full bg-gray-400 dark:bg-gray-500 animate-bounce" style={{ animationDelay: '150ms' }}></div>
                  <div className="w-2 h-2 rounded-full bg-gray-400 dark:bg-gray-500 animate-bounce" style={{ animationDelay: '300ms' }}></div>
                </div>
              </div>
            </motion.div>
          )}

          <div ref={messagesEndRef} />
        </AnimatePresence>
      </div>

      {/* Suggested Replies */}
      <AnimatePresence>
        {suggestedReplies.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 10 }}
            className="px-4 py-2 border-t border-gray-200 dark:border-dark-700 bg-white dark:bg-dark-800"
          >
            <div className="flex items-center mb-2">
              <RiLightbulbLine className="text-yellow-500 mr-2" />
              <span className="text-xs font-medium text-gray-500 dark:text-gray-400">
                AI Suggested Replies
              </span>
            </div>
            <div className="flex flex-wrap gap-2">
              {suggestedReplies.map((reply, index) => (
                <button
                  key={index}
                  onClick={() => handleSuggestedReplyClick(reply)}
                  className="px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 dark:bg-dark-700 dark:hover:bg-dark-600 text-gray-700 dark:text-gray-300 rounded-full transition-colors duration-200"
                >
                  {reply}
                </button>
              ))}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Message Input */}
      <div className="p-3 border-t border-gray-200 dark:border-dark-700 bg-white dark:bg-dark-800">
        <form onSubmit={handleSendMessage} className="flex flex-col">
          <div className="flex items-center">
            {/* Attachment button with dropdown */}
            <div className="relative">
              <button
                type="button"
                onClick={() => setIsAttachmentMenuOpen(!isAttachmentMenuOpen)}
                className="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-dark-700 transition-colors duration-200"
                aria-label="Add attachment"
              >
                <RiAttachment2 className="text-xl" />
              </button>

              <AnimatePresence>
                {isAttachmentMenuOpen && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 10 }}
                    className="absolute bottom-full left-0 mb-2 bg-white dark:bg-dark-800 rounded-lg shadow-lg border border-gray-200 dark:border-dark-700 z-10 w-48"
                  >
                    <div className="p-1">
                      <button
                        type="button"
                        className="flex items-center w-full px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-dark-700 rounded-md"
                        onClick={() => setIsAttachmentMenuOpen(false)}
                      >
                        <RiImageLine className="mr-2 text-blue-500" />
                        Image
                      </button>
                      <button
                        type="button"
                        className="flex items-center w-full px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-dark-700 rounded-md"
                        onClick={() => setIsAttachmentMenuOpen(false)}
                      >
                        <RiFileGifLine className="mr-2 text-purple-500" />
                        GIF
                      </button>
                      <button
                        type="button"
                        className="flex items-center w-full px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-dark-700 rounded-md"
                        onClick={() => setIsAttachmentMenuOpen(false)}
                      >
                        <RiMoreLine className="mr-2 text-gray-500" />
                        More options
                      </button>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>

            {/* Emoji button */}
            <button
              type="button"
              onClick={() => setShowEmojiPicker(!showEmojiPicker)}
              className="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-dark-700 transition-colors duration-200"
              aria-label="Add emoji"
            >
              <RiEmotionLine className="text-xl" />
            </button>

            {/* Voice message button */}
            <button
              type="button"
              className="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-dark-700 transition-colors duration-200"
              aria-label="Record voice message"
            >
              <RiMicLine className="text-xl" />
            </button>

            {/* Message input */}
            <div className="relative flex-1 mx-2">
              <input
                ref={inputRef}
                type="text"
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="Type a message..."
                className="w-full py-2 px-4 bg-gray-100 dark:bg-dark-700 rounded-full focus:outline-none focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400 text-gray-800 dark:text-gray-200"
              />
            </div>

            {/* Send button */}
            <motion.button
              type="submit"
              whileTap={{ scale: 0.9 }}
              className={`p-2 rounded-full ${
                newMessage.trim() === ''
                  ? 'bg-gray-300 dark:bg-dark-600 cursor-not-allowed'
                  : 'bg-primary-500 hover:bg-primary-600 dark:bg-primary-600 dark:hover:bg-primary-700'
              } text-white transition-colors duration-200`}
              disabled={newMessage.trim() === ''}
              aria-label="Send message"
            >
              <RiSendPlaneFill className="text-xl" />
            </motion.button>
          </div>

          {/* Emoji picker (simplified) */}
          <AnimatePresence>
            {showEmojiPicker && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                className="mt-2 p-2 bg-white dark:bg-dark-700 border border-gray-200 dark:border-dark-600 rounded-lg shadow-md"
              >
                <div className="grid grid-cols-8 gap-2">
                  {['😊', '😂', '❤️', '👍', '🙏', '🔥', '✨', '🎉',
                    '😎', '🤔', '😢', '😡', '🥳', '😴', '🤗', '👋'].map(emoji => (
                    <button
                      key={emoji}
                      type="button"
                      onClick={() => {
                        setNewMessage(prev => prev + emoji);
                        setShowEmojiPicker(false);
                        inputRef.current?.focus();
                      }}
                      className="text-2xl hover:bg-gray-100 dark:hover:bg-dark-600 rounded p-1"
                    >
                      {emoji}
                    </button>
                  ))}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </form>
      </div>
    </div>
  );
};

export default ChatWindow;
